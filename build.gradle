plugins {
	id 'org.springframework.boot' version '2.7.1-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.springframework.experimental.aot' version '0.12.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '16'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven { url 'https://repo.spring.io/release' }
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

project.ext{
	querydslVersion = dependencyManagement.importedProperties['querydsl.version']
}

dependencies {
	//스프링 데브 툴스와 액추에이터를 사용하기 시작한다.
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//JPA를 사용한다.
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//hal explorer를 사용한다.
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'

	//스프링 밸리데이션을 사용한다.
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	//MySQL 커넥터를 사용한다.
	runtimeOnly 'mysql:mysql-connector-java'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//Querydsl을 사용할 수 있도록 셋팅한다.
	implementation "com.querydsl:querydsl-jpa"
	implementation "com.querydsl:querydsl-collections"

	//querydsl의 적합한 버전을 프레임워크에서 자동으로 찾아줄 수 있게 해준다.
	annotationProcessor "com.querydsl:querydsl-apt:${project.querydslVersion}:jpa"

	annotationProcessor "jakarta.persistence:jakarta.persistence-api"//이놈과
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"//이놈을 추가해 줘야
	//정상적으로 QueryDSL의 Q클래스가 생성되고 프로젝트 컴파일도 된다.

	//spring security를 사용하기 시작한다.
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder:tiny'
	environment = ['BP_NATIVE_IMAGE': 'true']
}

/**
 * QueryDSL 설정용
 * */
//파일이 생성되는 기본 위치를 변경하기 위한 것
def generated = "src/main/generated"
tasks.withType(JavaCompile){
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

//java source set 에 querydsl QClass 위치 추가
sourceSets{
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}